{"remainingRequest":"/Users/yurii/dev/donato2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yurii/dev/donato2/src/pages/components/JavascriptComponents.vue?vue&type=template&id=72252b08&","dependencies":[{"path":"/Users/yurii/dev/donato2/src/pages/components/JavascriptComponents.vue","mtime":1631888606000},{"path":"/Users/yurii/dev/donato2/node_modules/cache-loader/dist/cjs.js","mtime":1662625893501},{"path":"/Users/yurii/dev/donato2/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1662625895392},{"path":"/Users/yurii/dev/donato2/node_modules/cache-loader/dist/cjs.js","mtime":1662625893501},{"path":"/Users/yurii/dev/donato2/node_modules/vue-loader/lib/index.js","mtime":1662625894809}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXYKICBpZD0iamF2YXNjcmlwdENvbXBvbmVudHMiCiAgY2xhc3M9InNlY3Rpb24gc2VjdGlvbi1qYXZhc2NyaXB0Igo+CiAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgIDxoMyBjbGFzcz0idGl0bGUiPgogICAgICBKYXZhc2NyaXB0IGNvbXBvbmVudHMKICAgIDwvaDM+CiAgICA8ZGl2CiAgICAgIGlkPSJtb2RhbHMiCiAgICAgIGNsYXNzPSJyb3ciCiAgICA+CiAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02IG1vZGFsLWJ1dHRvbnMiPgogICAgICAgIDxoND5Nb2RhbDwvaDQ+CiAgICAgICAgPG4tYnV0dG9uCiAgICAgICAgICB0eXBlPSJwcmltYXJ5IgogICAgICAgICAgQGNsaWNrLm5hdGl2ZT0ibW9kYWxzLmNsYXNzaWMgPSB0cnVlIgogICAgICAgID4KICAgICAgICAgIDxpIGNsYXNzPSJub3ctdWktaWNvbnMgZmlsZXNfc2luZ2xlLWNvcHktMDQiIC8+IENsYXNzaWMKICAgICAgICA8L24tYnV0dG9uPgogICAgICAgIDxuLWJ1dHRvbgogICAgICAgICAgdHlwZT0icHJpbWFyeSIKICAgICAgICAgIEBjbGljay5uYXRpdmU9Im1vZGFscy5taW5pID0gdHJ1ZSIKICAgICAgICA+CiAgICAgICAgICA8aSBjbGFzcz0ibm93LXVpLWljb25zIG1lZGlhLTFfYnV0dG9uLXBvd2VyIiAvPiBMYXVuY2ggTW9kYWwgTWluaQogICAgICAgIDwvbi1idXR0b24+CiAgICAgICAgPG4tYnV0dG9uCiAgICAgICAgICB0eXBlPSJwcmltYXJ5IgogICAgICAgICAgQGNsaWNrLm5hdGl2ZT0ibW9kYWxzLm5vdGljZSA9IHRydWUiCiAgICAgICAgPgogICAgICAgICAgPGkgY2xhc3M9Im5vdy11aS1pY29ucyB0cmF2ZWxfaW5mbyIgLz4gTm90aWNlCiAgICAgICAgPC9uLWJ1dHRvbj4KICAgICAgICA8bi1idXR0b24KICAgICAgICAgIHR5cGU9InByaW1hcnkiCiAgICAgICAgICBAY2xpY2submF0aXZlPSJtb2RhbHMubG9naW4gPSB0cnVlIgogICAgICAgID4KICAgICAgICAgIDxpIGNsYXNzPSJub3ctdWktaWNvbnMgdXNlcnNfc2luZ2xlLTAyIiAvPiBMb2dpbiBNb2RhbAogICAgICAgIDwvbi1idXR0b24+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiBwb3BvdmVyLWJ1dHRvbnMiPgogICAgICAgIDxoND5Qb3BvdmVyczwvaDQ+CiAgICAgICAgPGVsLXBvcG92ZXIKICAgICAgICAgIHJlZj0icG9wb3ZlcjEiCiAgICAgICAgICBwb3BwZXItY2xhc3M9InBvcG92ZXIgcG9wb3Zlci1wcmltYXJ5IgogICAgICAgICAgcGxhY2VtZW50PSJsZWZ0IgogICAgICAgICAgd2lkdGg9IjIwMCIKICAgICAgICAgIHRyaWdnZXI9ImhvdmVyIgogICAgICAgID4KICAgICAgICAgIDxoMyBjbGFzcz0icG9wb3Zlci1oZWFkZXIiPgogICAgICAgICAgICBQb3BvdmVyIE9uIExlZnQKICAgICAgICAgIDwvaDM+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJwb3BvdmVyLWJvZHkiPgogICAgICAgICAgICBIZXJlIHdpbGwgYmUgc29tZSB2ZXJ5IHVzZWZ1bCBpbmZvcm1hdGlvbiBhYm91dCBoaXMgcG9wb3Zlci4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZWwtcG9wb3Zlcj4KCiAgICAgICAgPGVsLXBvcG92ZXIKICAgICAgICAgIHJlZj0icG9wb3ZlcjIiCiAgICAgICAgICBwb3BwZXItY2xhc3M9InBvcG92ZXIiCiAgICAgICAgICBwbGFjZW1lbnQ9InRvcC1zdGFydCIKICAgICAgICAgIHdpZHRoPSIyMDAiCiAgICAgICAgICB0cmlnZ2VyPSJob3ZlciIKICAgICAgICA+CiAgICAgICAgICA8aDMgY2xhc3M9InBvcG92ZXItaGVhZGVyIj4KICAgICAgICAgICAgUG9wb3ZlciBPbiBUb3AKICAgICAgICAgIDwvaDM+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJwb3BvdmVyLWJvZHkiPgogICAgICAgICAgICBIZXJlIHdpbGwgYmUgc29tZSB2ZXJ5IHVzZWZ1bCBpbmZvcm1hdGlvbiBhYm91dCBoaXMgcG9wb3Zlci4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZWwtcG9wb3Zlcj4KCiAgICAgICAgPGVsLXBvcG92ZXIKICAgICAgICAgIHJlZj0icG9wb3ZlcjMiCiAgICAgICAgICBwb3BwZXItY2xhc3M9InBvcG92ZXIiCiAgICAgICAgICBwbGFjZW1lbnQ9InJpZ2h0IgogICAgICAgICAgd2lkdGg9IjIwMCIKICAgICAgICAgIHRyaWdnZXI9ImhvdmVyIgogICAgICAgID4KICAgICAgICAgIDxoMyBjbGFzcz0icG9wb3Zlci1oZWFkZXIiPgogICAgICAgICAgICBQb3BvdmVyIE9uIFJpZ2h0CiAgICAgICAgICA8L2gzPgogICAgICAgICAgPGRpdiBjbGFzcz0icG9wb3Zlci1ib2R5Ij4KICAgICAgICAgICAgSGVyZSB3aWxsIGJlIHNvbWUgdmVyeSB1c2VmdWwgaW5mb3JtYXRpb24gYWJvdXQgaGlzIHBvcG92ZXIuCiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2VsLXBvcG92ZXI+CgogICAgICAgIDxlbC1wb3BvdmVyCiAgICAgICAgICByZWY9InBvcG92ZXI0IgogICAgICAgICAgcG9wcGVyLWNsYXNzPSJwb3BvdmVyIgogICAgICAgICAgcGxhY2VtZW50PSJib3R0b20iCiAgICAgICAgICB3aWR0aD0iMjAwIgogICAgICAgICAgdHJpZ2dlcj0iaG92ZXIiCiAgICAgICAgPgogICAgICAgICAgPGgzIGNsYXNzPSJwb3BvdmVyLWhlYWRlciI+CiAgICAgICAgICAgIFBvcG92ZXIgT24gQm90dG9tCiAgICAgICAgICA8L2gzPgogICAgICAgICAgPGRpdiBjbGFzcz0icG9wb3Zlci1ib2R5Ij4KICAgICAgICAgICAgSGVyZSB3aWxsIGJlIHNvbWUgdmVyeSB1c2VmdWwgaW5mb3JtYXRpb24gYWJvdXQgaGlzIHBvcG92ZXIuCiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2VsLXBvcG92ZXI+CgogICAgICAgIDxuLWJ1dHRvbgogICAgICAgICAgdi1wb3BvdmVyOnBvcG92ZXIxCiAgICAgICAgICB0eXBlPSJkZWZhdWx0IgogICAgICAgID4KICAgICAgICAgIE9uIGxlZnQKICAgICAgICA8L24tYnV0dG9uPgogICAgICAgIDxuLWJ1dHRvbgogICAgICAgICAgdi1wb3BvdmVyOnBvcG92ZXIyCiAgICAgICAgICB0eXBlPSJkZWZhdWx0IgogICAgICAgID4KICAgICAgICAgIE9uIHRvcAogICAgICAgIDwvbi1idXR0b24+CiAgICAgICAgPG4tYnV0dG9uCiAgICAgICAgICB2LXBvcG92ZXI6cG9wb3ZlcjMKICAgICAgICAgIHR5cGU9ImRlZmF1bHQiCiAgICAgICAgPgogICAgICAgICAgT24gcmlnaHQKICAgICAgICA8L24tYnV0dG9uPgogICAgICAgIDxuLWJ1dHRvbgogICAgICAgICAgdi1wb3BvdmVyOnBvcG92ZXI0CiAgICAgICAgICB0eXBlPSJkZWZhdWx0IgogICAgICAgID4KICAgICAgICAgIE9uIGJvdHRvbQogICAgICAgIDwvbi1idXR0b24+CiAgICAgIDwvZGl2PgogICAgICA8YnI+CiAgICAgIDxicj4KICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYiPgogICAgICAgIDxoND5EYXRldGltZXBpY2tlcjwvaDQ+CiAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlci1jb250YWluZXIiPgogICAgICAgICAgICAgIDxmZy1pbnB1dD4KICAgICAgICAgICAgICAgIDxlbC1kYXRlLXBpY2tlcgogICAgICAgICAgICAgICAgICB2LW1vZGVsPSJwaWNrZXJzLmRhdGVUaW1lUGlja2VyIgogICAgICAgICAgICAgICAgICB0eXBlPSJkYXRldGltZSIKICAgICAgICAgICAgICAgICAgcG9wcGVyLWNsYXNzPSJkYXRlLXBpY2tlciBkYXRlLXBpY2tlci1wcmltYXJ5IgogICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iRGF0ZSBUaW1lIFBpY2tlciIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgPC9mZy1pbnB1dD4KICAgICAgICAgICAgICA8ZmctaW5wdXQ+CiAgICAgICAgICAgICAgICA8ZWwtZGF0ZS1waWNrZXIKICAgICAgICAgICAgICAgICAgdi1tb2RlbD0icGlja2Vycy5kYXRlUGlja2VyIgogICAgICAgICAgICAgICAgICB0eXBlPSJkYXRlIgogICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iRGF0ZSBQaWNrZXIiCiAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgIDwvZmctaW5wdXQ+CiAgICAgICAgICAgICAgPGZnLWlucHV0PgogICAgICAgICAgICAgICAgPGVsLXRpbWUtc2VsZWN0CiAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InBpY2tlcnMudGltZVBpY2tlciIKICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IlRpbWUgUGlja2VyIgogICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICA8L2ZnLWlucHV0PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS0gICAgICAgICAgICAgICAgIGNvbGxhcHNlIC0tPgogICAgICAgIDxkaXYgaWQ9ImNvbGxhcHNlIj4KICAgICAgICAgIDxkaXYgY2xhc3M9InRpdGxlIj4KICAgICAgICAgICAgPGg0PkNvbGxhcHNlPC9oND4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4KICAgICAgICAgICAgICA8Y29sbGFwc2UgOmFjdGl2ZS1pbmRleD0iMCI+CiAgICAgICAgICAgICAgICA8Y29sbGFwc2UtaXRlbSB0aXRsZT0iQ29sbGFwc2libGUgR3JvdXAgSXRlbSAjMSI+CiAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgQW5pbSBwYXJpYXR1ciBjbGljaGUgcmVwcmVoZW5kZXJpdCwgZW5pbSBlaXVzbW9kIGhpZ2ggbGlmZSBhY2N1c2FtdXMgdGVycnkKICAgICAgICAgICAgICAgICAgICByaWNoYXJkc29uIGFkIHNxdWlkLiAzIHdvbGYKICAgICAgICAgICAgICAgICAgICBtb29uIG9mZmljaWEgYXV0ZSwgbm9uIGN1cGlkYXRhdCBza2F0ZWJvYXJkIGRvbG9yIGJydW5jaC4gRm9vZCB0cnVjayBxdWlub2EKICAgICAgICAgICAgICAgICAgICBuZXNjaXVudCBsYWJvcnVtIGVpdXNtb2QuCiAgICAgICAgICAgICAgICAgICAgQnJ1bmNoIDMgd29sZiBtb29uIHRlbXBvciwgc3VudCBhbGlxdWEgcHV0IGEgYmlyZCBvbiBpdCBzcXVpZCBzaW5nbGUtb3JpZ2luCiAgICAgICAgICAgICAgICAgICAgY29mZmVlIG51bGxhIGFzc3VtZW5kYQogICAgICAgICAgICAgICAgICAgIHNob3JlZGl0Y2ggZXQuIE5paGlsIGFuaW0ga2VmZml5ZWggaGVsdmV0aWNhLCBjcmFmdCBiZWVyIGxhYm9yZSB3ZXMgYW5kZXJzb24KICAgICAgICAgICAgICAgICAgICBjcmVkIG5lc2NpdW50IHNhcGllbnRlIGVhCiAgICAgICAgICAgICAgICAgICAgcHJvaWRlbnQuIEFkIHZlZ2FuIGV4Y2VwdGV1ciBidXRjaGVyIHZpY2UgbG9tby4gTGVnZ2luZ3Mgb2NjYWVjYXQgY3JhZnQgYmVlcgogICAgICAgICAgICAgICAgICAgIGZhcm0tdG8tdGFibGUsIHJhdyBkZW5pbQogICAgICAgICAgICAgICAgICAgIGFlc3RoZXRpYyBzeW50aCBuZXNjaXVudCB5b3UgcHJvYmFibHkgaGF2ZW4ndCBoZWFyZCBvZiB0aGVtIGFjY3VzYW11cyBsYWJvcmUKICAgICAgICAgICAgICAgICAgICBzdXN0YWluYWJsZSBWSFMuCiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9jb2xsYXBzZS1pdGVtPgoKICAgICAgICAgICAgICAgIDxjb2xsYXBzZS1pdGVtIHRpdGxlPSJDb2xsYXBzaWJsZSBHcm91cCBJdGVtICMyIj4KICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICBBbmltIHBhcmlhdHVyIGNsaWNoZSByZXByZWhlbmRlcml0LCBlbmltIGVpdXNtb2QgaGlnaCBsaWZlIGFjY3VzYW11cyB0ZXJyeQogICAgICAgICAgICAgICAgICAgIHJpY2hhcmRzb24gYWQgc3F1aWQuIDMgd29sZgogICAgICAgICAgICAgICAgICAgIG1vb24gb2ZmaWNpYSBhdXRlLCBub24gY3VwaWRhdGF0IHNrYXRlYm9hcmQgZG9sb3IgYnJ1bmNoLiBGb29kIHRydWNrIHF1aW5vYQogICAgICAgICAgICAgICAgICAgIG5lc2NpdW50IGxhYm9ydW0gZWl1c21vZC4KICAgICAgICAgICAgICAgICAgICBCcnVuY2ggMyB3b2xmIG1vb24gdGVtcG9yLCBzdW50IGFsaXF1YSBwdXQgYSBiaXJkIG9uIGl0IHNxdWlkIHNpbmdsZS1vcmlnaW4KICAgICAgICAgICAgICAgICAgICBjb2ZmZWUgbnVsbGEgYXNzdW1lbmRhCiAgICAgICAgICAgICAgICAgICAgc2hvcmVkaXRjaCBldC4gTmloaWwgYW5pbSBrZWZmaXllaCBoZWx2ZXRpY2EsIGNyYWZ0IGJlZXIgbGFib3JlIHdlcyBhbmRlcnNvbgogICAgICAgICAgICAgICAgICAgIGNyZWQgbmVzY2l1bnQgc2FwaWVudGUgZWEKICAgICAgICAgICAgICAgICAgICBwcm9pZGVudC4gQWQgdmVnYW4gZXhjZXB0ZXVyIGJ1dGNoZXIgdmljZSBsb21vLiBMZWdnaW5ncyBvY2NhZWNhdCBjcmFmdCBiZWVyCiAgICAgICAgICAgICAgICAgICAgZmFybS10by10YWJsZSwgcmF3IGRlbmltCiAgICAgICAgICAgICAgICAgICAgYWVzdGhldGljIHN5bnRoIG5lc2NpdW50IHlvdSBwcm9iYWJseSBoYXZlbid0IGhlYXJkIG9mIHRoZW0gYWNjdXNhbXVzIGxhYm9yZQogICAgICAgICAgICAgICAgICAgIHN1c3RhaW5hYmxlIFZIUy4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2NvbGxhcHNlLWl0ZW0+CgogICAgICAgICAgICAgICAgPGNvbGxhcHNlLWl0ZW0gdGl0bGU9IkNvbGxhcHNpYmxlIEdyb3VwIEl0ZW0gIzMiPgogICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIEFuaW0gcGFyaWF0dXIgY2xpY2hlIHJlcHJlaGVuZGVyaXQsIGVuaW0gZWl1c21vZCBoaWdoIGxpZmUgYWNjdXNhbXVzIHRlcnJ5CiAgICAgICAgICAgICAgICAgICAgcmljaGFyZHNvbiBhZCBzcXVpZC4gMyB3b2xmCiAgICAgICAgICAgICAgICAgICAgbW9vbiBvZmZpY2lhIGF1dGUsIG5vbiBjdXBpZGF0YXQgc2thdGVib2FyZCBkb2xvciBicnVuY2guIEZvb2QgdHJ1Y2sgcXVpbm9hCiAgICAgICAgICAgICAgICAgICAgbmVzY2l1bnQgbGFib3J1bSBlaXVzbW9kLgogICAgICAgICAgICAgICAgICAgIEJydW5jaCAzIHdvbGYgbW9vbiB0ZW1wb3IsIHN1bnQgYWxpcXVhIHB1dCBhIGJpcmQgb24gaXQgc3F1aWQgc2luZ2xlLW9yaWdpbgogICAgICAgICAgICAgICAgICAgIGNvZmZlZSBudWxsYSBhc3N1bWVuZGEKICAgICAgICAgICAgICAgICAgICBzaG9yZWRpdGNoIGV0LiBOaWhpbCBhbmltIGtlZmZpeWVoIGhlbHZldGljYSwgY3JhZnQgYmVlciBsYWJvcmUgd2VzIGFuZGVyc29uCiAgICAgICAgICAgICAgICAgICAgY3JlZCBuZXNjaXVudCBzYXBpZW50ZSBlYQogICAgICAgICAgICAgICAgICAgIHByb2lkZW50LiBBZCB2ZWdhbiBleGNlcHRldXIgYnV0Y2hlciB2aWNlIGxvbW8uIExlZ2dpbmdzIG9jY2FlY2F0IGNyYWZ0IGJlZXIKICAgICAgICAgICAgICAgICAgICBmYXJtLXRvLXRhYmxlLCByYXcgZGVuaW0KICAgICAgICAgICAgICAgICAgICBhZXN0aGV0aWMgc3ludGggbmVzY2l1bnQgeW91IHByb2JhYmx5IGhhdmVuJ3QgaGVhcmQgb2YgdGhlbSBhY2N1c2FtdXMgbGFib3JlCiAgICAgICAgICAgICAgICAgICAgc3VzdGFpbmFibGUgVkhTLgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvY29sbGFwc2UtaXRlbT4KICAgICAgICAgICAgICA8L2NvbGxhcHNlPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS0gICAgICAgICAgICAgICAgIGVuZCBjb2xsYXBzZSAtLT4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02IHRvb2x0aXAtYnV0dG9ucyI+CiAgICAgICAgPGg0PlRvb2x0aXBzPC9oND4KICAgICAgICA8ZWwtdG9vbHRpcAogICAgICAgICAgY2xhc3M9Iml0ZW0iCiAgICAgICAgICBjb250ZW50PSJUb29sdGlwIG9uIHRoZSBsZWZ0IgogICAgICAgICAgcGxhY2VtZW50PSJsZWZ0IgogICAgICAgID4KICAgICAgICAgIDxuLWJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IGJ0bi10b29sdGlwIj4KICAgICAgICAgICAgT24gbGVmdAogICAgICAgICAgPC9uLWJ1dHRvbj4KICAgICAgICA8L2VsLXRvb2x0aXA+CiAgICAgICAgPGVsLXRvb2x0aXAKICAgICAgICAgIGNsYXNzPSJpdGVtIgogICAgICAgICAgY29udGVudD0iVG9vbHRpcCBvbiB0b3AiCiAgICAgICAgICBwbGFjZW1lbnQ9InRvcCIKICAgICAgICA+CiAgICAgICAgICA8bi1idXR0b24gY2xhc3M9ImJ0biBidG4tZGVmYXVsdCBidG4tdG9vbHRpcCI+CiAgICAgICAgICAgIE9uIHRvcAogICAgICAgICAgPC9uLWJ1dHRvbj4KICAgICAgICA8L2VsLXRvb2x0aXA+CiAgICAgICAgPGVsLXRvb2x0aXAKICAgICAgICAgIGNsYXNzPSJpdGVtIgogICAgICAgICAgY29udGVudD0iVG9vbHRpcCBvbiBib3R0b20iCiAgICAgICAgICBwbGFjZW1lbnQ9ImJvdHRvbSIKICAgICAgICA+CiAgICAgICAgICA8bi1idXR0b24gY2xhc3M9ImJ0biBidG4tZGVmYXVsdCBidG4tdG9vbHRpcCI+CiAgICAgICAgICAgIE9uIGJvdHRvbQogICAgICAgICAgPC9uLWJ1dHRvbj4KICAgICAgICA8L2VsLXRvb2x0aXA+CiAgICAgICAgPGVsLXRvb2x0aXAKICAgICAgICAgIGNsYXNzPSJpdGVtIgogICAgICAgICAgY29udGVudD0iVG9vbHRpcCBvbiBib3R0b20iCiAgICAgICAgICBwbGFjZW1lbnQ9InJpZ2h0IgogICAgICAgID4KICAgICAgICAgIDxuLWJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IGJ0bi10b29sdGlwIj4KICAgICAgICAgICAgT24gcmlnaHQKICAgICAgICAgIDwvbi1idXR0b24+CiAgICAgICAgPC9lbC10b29sdGlwPgogICAgICAgIDxkaXYgY2xhc3M9ImNsZWFyZml4IiAvPgogICAgICAgIDxicj4KICAgICAgICA8YnI+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+CiAgPCEtLSBDbGFzc2ljIE1vZGFsIC0tPgogIDxtb2RhbAogICAgOnNob3cuc3luYz0ibW9kYWxzLmNsYXNzaWMiCiAgICBoZWFkZXItY2xhc3Nlcz0ianVzdGlmeS1jb250ZW50LWNlbnRlciIKICA+CiAgICA8aDQKICAgICAgc2xvdD0iaGVhZGVyIgogICAgICBjbGFzcz0idGl0bGUgdGl0bGUtdXAiCiAgICA+CiAgICAgIE1vZGFsIHRpdGxlCiAgICA8L2g0PgogICAgPHA+CiAgICAgIEZhciBmYXIgYXdheSwgYmVoaW5kIHRoZSB3b3JkIG1vdW50YWlucywgZmFyIGZyb20gdGhlIGNvdW50cmllcyBWb2thbGlhIGFuZCBDb25zb25hbnRpYSwgdGhlcmUgbGl2ZQogICAgICB0aGUgYmxpbmQgdGV4dHMuIFNlcGFyYXRlZCB0aGV5IGxpdmUgaW4gQm9va21hcmtzZ3JvdmUgcmlnaHQgYXQgdGhlIGNvYXN0IG9mIHRoZSBTZW1hbnRpY3MsIGEgbGFyZ2UKICAgICAgbGFuZ3VhZ2Ugb2NlYW4uIEEgc21hbGwgcml2ZXIgbmFtZWQgRHVkZW4gZmxvd3MgYnkgdGhlaXIgcGxhY2UgYW5kIHN1cHBsaWVzIGl0IHdpdGggdGhlIG5lY2Vzc2FyeQogICAgICByZWdlbGlhbGlhLiBJdCBpcyBhIHBhcmFkaXNlbWF0aWMgY291bnRyeSwgaW4gd2hpY2ggcm9hc3RlZCBwYXJ0cyBvZiBzZW50ZW5jZXMgZmx5IGludG8geW91cgogICAgICBtb3V0aC4KICAgIDwvcD4KICAgIDx0ZW1wbGF0ZSBzbG90PSJmb290ZXIiPgogICAgICA8bi1idXR0b24+TmljZSBCdXR0b248L24tYnV0dG9uPgogICAgICA8bi1idXR0b24KICAgICAgICB0eXBlPSJkYW5nZXIiCiAgICAgICAgQGNsaWNrLm5hdGl2ZT0ibW9kYWxzLmNsYXNzaWMgPSBmYWxzZSIKICAgICAgPgogICAgICAgIENsb3NlCiAgICAgIDwvbi1idXR0b24+CiAgICA8L3RlbXBsYXRlPgogIDwvbW9kYWw+CgogIDwhLS0gbm90aWNlIG1vZGFsIC0tPgogIDxtb2RhbAogICAgOnNob3cuc3luYz0ibW9kYWxzLm5vdGljZSIKICAgIGZvb3Rlci1jbGFzc2VzPSJqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIgogICAgdHlwZT0ibm90aWNlIgogID4KICAgIDxoNQogICAgICBzbG90PSJoZWFkZXIiCiAgICAgIGNsYXNzPSJtb2RhbC10aXRsZSIKICAgID4KICAgICAgSG93IERvIFlvdSBCZWNvbWUgYW4gQWZmaWxpYXRlPwogICAgPC9oNT4KICAgIDx0ZW1wbGF0ZT4KICAgICAgPGRpdiBjbGFzcz0iaW5zdHJ1Y3Rpb24iPgogICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtOCI+CiAgICAgICAgICAgIDxzdHJvbmc+MS4gUmVnaXN0ZXI8L3N0cm9uZz4KICAgICAgICAgICAgPHAgY2xhc3M9ImRlc2NyaXB0aW9uIj4KICAgICAgICAgICAgICBUaGUgZmlyc3Qgc3RlcCBpcyB0byBjcmVhdGUgYW4gYWNjb3VudCBhdCA8YQogICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly8vd3d3LmNyZWF0aXZlLXRpbS5jb20vIgogICAgICAgICAgICAgID5DcmVhdGl2ZSBUaW08L2E+LiBZb3UgY2FuIGNob29zZSBhIHNvY2lhbAogICAgICAgICAgICAgIG5ldHdvcmsgb3IKICAgICAgICAgICAgICBnbyBmb3IgdGhlIGNsYXNzaWMgdmVyc2lvbiwgd2hhdGV2ZXIgd29ya3MgYmVzdCBmb3IgeW91LgogICAgICAgICAgICA8L3A+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icGljdHVyZSI+CiAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgdi1sYXp5PSInaW1nL3ByaWNpbmcxLmpwZyciCiAgICAgICAgICAgICAgICBhbHQ9IlRodW1ibmFpbCBJbWFnZSIKICAgICAgICAgICAgICAgIGNsYXNzPSJyb3VuZGVkIGltZy1yYWlzZWQiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iaW5zdHJ1Y3Rpb24iPgogICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtOCI+CiAgICAgICAgICAgIDxzdHJvbmc+Mi4gQXBwbHk8L3N0cm9uZz4KICAgICAgICAgICAgPHAgY2xhc3M9ImRlc2NyaXB0aW9uIj4KICAgICAgICAgICAgICBUaGUgZmlyc3Qgc3RlcCBpcyB0byBjcmVhdGUgYW4gYWNjb3VudCBhdCA8YQogICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly8vd3d3LmNyZWF0aXZlLXRpbS5jb20vIgogICAgICAgICAgICAgID5DcmVhdGl2ZSBUaW08L2E+LiBZb3UgY2FuIGNob29zZSBhIHNvY2lhbAogICAgICAgICAgICAgIG5ldHdvcmsgb3IKICAgICAgICAgICAgICBnbyBmb3IgdGhlIGNsYXNzaWMgdmVyc2lvbiwgd2hhdGV2ZXIgd29ya3MgYmVzdCBmb3IgeW91LgogICAgICAgICAgICA8L3A+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icGljdHVyZSI+CiAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgdi1sYXp5PSInaW1nL3Byb2plY3Q5LmpwZyciCiAgICAgICAgICAgICAgICBhbHQ9IlRodW1ibmFpbCBJbWFnZSIKICAgICAgICAgICAgICAgIGNsYXNzPSJyb3VuZGVkIGltZy1yYWlzZWQiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPHA+CiAgICAgICAgSWYgeW91IGhhdmUgbW9yZSBxdWVzdGlvbnMsIGRvbid0IGhlc2l0YXRlIHRvIGNvbnRhY3QgdXMgb3Igc2VuZCB1cyBhIHR3ZWV0IEBjcmVhdGl2ZXRpbS4gV2UncmUKICAgICAgICBoZXJlIHRvIGhlbHAhCiAgICAgIDwvcD4KICAgIDwvdGVtcGxhdGU+CiAgICA8ZGl2CiAgICAgIHNsb3Q9ImZvb3RlciIKICAgICAgY2xhc3M9Imp1c3RpZnktY29udGVudC1jZW50ZXIiCiAgICA+CiAgICAgIDxuLWJ1dHRvbgogICAgICAgIHR5cGU9ImluZm8iCiAgICAgICAgcm91bmQKICAgICAgICBAY2xpY2submF0aXZlPSJtb2RhbHMubm90aWNlID0gZmFsc2UiCiAgICAgID4KICAgICAgICBTb3VuZHMgZ29vZCEKICAgICAgPC9uLWJ1dHRvbj4KICAgIDwvZGl2PgogIDwvbW9kYWw+CgogIDwhLS0gc21hbGwgbW9kYWwgLS0+CiAgPG1vZGFsCiAgICA6c2hvdy5zeW5jPSJtb2RhbHMubWluaSIKICAgIGNsYXNzPSJtb2RhbC1wcmltYXJ5IgogICAgOnNob3ctY2xvc2U9ImZhbHNlIgogICAgaGVhZGVyLWNsYXNzZXM9Imp1c3RpZnktY29udGVudC1jZW50ZXIiCiAgICB0eXBlPSJtaW5pIgogID4KICAgIDxkaXYKICAgICAgc2xvdD0iaGVhZGVyIgogICAgICBjbGFzcz0ibW9kYWwtcHJvZmlsZSIKICAgID4KICAgICAgPGkgY2xhc3M9Im5vdy11aS1pY29ucyB1c2Vyc19jaXJjbGUtMDgiIC8+CiAgICA8L2Rpdj4KICAgIDxwPkFsd2F5cyBoYXZlIGFuIGFjY2VzcyB0byB5b3VyIHByb2ZpbGU8L3A+CiAgICA8dGVtcGxhdGUgc2xvdD0iZm9vdGVyIj4KICAgICAgPG4tYnV0dG9uCiAgICAgICAgdHlwZT0ibmV1dHJhbCIKICAgICAgICBsaW5rCiAgICAgID4KICAgICAgICBCYWNrCiAgICAgIDwvbi1idXR0b24+CiAgICAgIDxuLWJ1dHRvbgogICAgICAgIHR5cGU9Im5ldXRyYWwiCiAgICAgICAgbGluawogICAgICAgIEBjbGljay5uYXRpdmU9Im1vZGFscy5taW5pID0gZmFsc2UiCiAgICAgID4KICAgICAgICBDbG9zZQogICAgICA8L24tYnV0dG9uPgogICAgPC90ZW1wbGF0ZT4KICA8L21vZGFsPgogIDxtb2RhbAogICAgOnNob3cuc3luYz0ibW9kYWxzLmxvZ2luIgogICAgbW9kYWwtY2xhc3Nlcz0ibW9kYWwtbG9naW4iCiAgICBjbGFzcz0ibW9kYWwtcHJpbWFyeSIKICA+CiAgICA8ZGl2CiAgICAgIHNsb3Q9ImJhc2UtY29udGVudCIKICAgICAgY2xhc3M9ImNhcmQgY2FyZC1wbGFpbiBjYXJkLWxvZ2luIgogICAgICBkYXRhLWJhY2tncm91bmQtY29sb3I9IiIKICAgID4KICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIGp1c3RpZnktY29udGVudC1jZW50ZXIiPgogICAgICAgIDxidXR0b24KICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgIGNsYXNzPSJjbG9zZSIKICAgICAgICAgIGRhdGEtZGlzbWlzcz0ibW9kYWwiCiAgICAgICAgICBhcmlhLWhpZGRlbj0idHJ1ZSIKICAgICAgICA+CiAgICAgICAgICA8aSBjbGFzcz0ibm93LXVpLWljb25zIHVpLTFfc2ltcGxlLXJlbW92ZSIgLz4KICAgICAgICA8L2J1dHRvbj4KICAgICAgICA8ZGl2IGNsYXNzPSJoZWFkZXIgaGVhZGVyLXByaW1hcnkgdGV4dC1jZW50ZXIiPgogICAgICAgICAgPGRpdiBjbGFzcz0ibG9nby1jb250YWluZXIiPgogICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgdi1sYXp5PSInaW1nL25vdy1sb2dvLnBuZyciCiAgICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgID4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+CiAgICAgICAgPGZvcm0KICAgICAgICAgIGNsYXNzPSJmb3JtIgogICAgICAgICAgbWV0aG9kPSIiCiAgICAgICAgICBhY3Rpb249IiIKICAgICAgICA+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkiPgogICAgICAgICAgICA8ZmctaW5wdXQKICAgICAgICAgICAgICBjbGFzcz0ibm8tYm9yZGVyIGlucHV0LWxnIgogICAgICAgICAgICAgIGFkZG9uLWxlZnQtaWNvbj0ibm93LXVpLWljb25zIHVzZXJzX2NpcmNsZS0wOCIKICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iRmlyc3QgTmFtZS4uLiIKICAgICAgICAgICAgLz4KCiAgICAgICAgICAgIDxmZy1pbnB1dAogICAgICAgICAgICAgIGNsYXNzPSJuby1ib3JkZXIgaW5wdXQtbGciCiAgICAgICAgICAgICAgdHlwZT0icGFzc3dvcmQiCiAgICAgICAgICAgICAgYWRkb24tbGVmdC1pY29uPSJub3ctdWktaWNvbnMgdWktMV9sb2NrLWNpcmNsZS1vcGVuIgogICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJQYXNzd29yZC4uLiIKICAgICAgICAgICAgLz4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZm9ybT4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciB0ZXh0LWNlbnRlciI+CiAgICAgICAgPGEKICAgICAgICAgIGhyZWY9IiNwYWJsbyIKICAgICAgICAgIGNsYXNzPSJidG4gYnRuLW5ldXRyYWwgYnRuLXJvdW5kIGJ0bi1sZyBidG4tYmxvY2siCiAgICAgICAgPkdldCBTdGFydGVkPC9hPgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvbW9kYWw+CjwvZGl2Pgo="},null]}