{"remainingRequest":"/Users/yurii/dev/donato2/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/yurii/dev/donato2/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yurii/dev/donato2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yurii/dev/donato2/src/pages/sections/Testimonials.vue?vue&type=template&id=501c1fc1&scoped=true&","dependencies":[{"path":"/Users/yurii/dev/donato2/src/pages/sections/Testimonials.vue","mtime":1631888606000},{"path":"/Users/yurii/dev/donato2/node_modules/cache-loader/dist/cjs.js","mtime":1662625893501},{"path":"/Users/yurii/dev/donato2/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1662625895392},{"path":"/Users/yurii/dev/donato2/node_modules/cache-loader/dist/cjs.js","mtime":1662625893501},{"path":"/Users/yurii/dev/donato2/node_modules/vue-loader/lib/index.js","mtime":1662625894809}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}